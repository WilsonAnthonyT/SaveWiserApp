import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:flutter_timezone/flutter_timezone.dart';

// Your own files
import 'setup_page.dart';
import 'main_nav.dart';
import 'services/notification_service.dart'; // üëà Add this
import 'services/notification_schedule.dart';

//hives
//import 'package:hive/hive.dart';
import 'package:path_provider/path_provider.dart';
import 'models/transaction.dart';

//firebase
// import 'package:firebase_core/firebase_core.dart';
// import 'firebase_options.dart'; // auto-generated by FlutterFire CLI

//import 'dart:io' show Platform;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  //firebase ini
  //await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  //notif initi
  await _requestNotificationPermission();
  await _initializeTimeZone();
  await NotificationService().init(); // üëà Use your new service
  await scheduleDailySpendingNotification();

  //transactions init
  // final dir = await getApplicationDocumentsDirectory();
  // Hive.init(dir.path);
  if (kIsWeb) {
    Hive.initFlutter(); // for web
  } else {
    final dir = await getApplicationDocumentsDirectory();
    Hive.init(dir.path);
  }

  Hive.registerAdapter(TransactionAdapter());

  //await Hive.deleteBoxFromDisk('transactions');
  await Hive.openBox<Transaction>('transactions');

  FlutterError.onError = (FlutterErrorDetails details) {
    FlutterError.presentError(details);
    // print('‚ùå Flutter Error: ${details.exception}');
  };

  runApp(SaveWiserApp());
}

Future<bool> _requestNotificationPermission() async {
  PermissionStatus status = await Permission.notification.request();
  return status.isGranted;
}

Future<void> _initializeTimeZone() async {
  tz.initializeTimeZones();
  try {
    final String timeZone = await FlutterTimezone.getLocalTimezone();
    tz.setLocalLocation(tz.getLocation(timeZone));
  } catch (e) {
    // print("Timezone error: $e. Falling back to UTC.");
    tz.setLocalLocation(tz.getLocation('UTC'));
  }
}

class SaveWiserApp extends StatelessWidget {
  const SaveWiserApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SaveWiser',
      theme: ThemeData(primarySwatch: Colors.green),
      home: const InitialScreenDecider(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class InitialScreenDecider extends StatefulWidget {
  const InitialScreenDecider({super.key});

  @override
  State<InitialScreenDecider> createState() => _InitialScreenDeciderState();
}

class _InitialScreenDeciderState extends State<InitialScreenDecider> {
  bool? isSetupDone;

  @override
  void initState() {
    super.initState();
    checkSetupStatus();
  }

  Future<void> checkSetupStatus() async {
    final prefs = await SharedPreferences.getInstance();
    final done = prefs.getBool('isSetupDone') ?? false;
    setState(() {
      isSetupDone = done;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (isSetupDone == null) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }

    return isSetupDone! ? MainNavigation(initialIndex: 2) : SetupStep0();
  }
}
